nonterminal: dataSegment
code:
global _dataSegment

try:
  data = _dataSegment
except NameError:
  return ""

data = "\n".join(data)

text:
[segment .data use32]
{{data}}


nonterminal: dsString
params: name = "string_in", term = "0"
code:
from random import random
global _dataSegment

try:
  _dataSegment
except NameError:
   _dataSegment = []
   
data = pop(makeList(loadFile("list.txt")));
   
_dataSegment.append("%s db \"%s\", %s" % (name, data, term) )
_dataSegment.append("");

return ""


nonterminal: dsCislaDouble
params: min = -10, max = 10, pocet = 12
code:
from random import random
global _dataSegment

try:
  _dataSegment
except NameError:
   _dataSegment = []

data = []
for i in range( int(pocet) ):
	data.append( str(round(random()*(max-min)+min,6)) )

data = ",".join(data)

_dataSegment.append("input_array dq %s" % data)
_dataSegment.append("input_array_len dd (input_array_len - input_array)/2")
_dataSegment.append("")

return ""

nonterminal: dsCisla
params: min = -9000, max = 9000, pocet = 12
code:
from random import random
global _dataSegment

try:
  _dataSegment
except NameError:
   _dataSegment = []


data = []
for i in range( int(pocet) ):
	data.append( str(int(random()*(max-min)+min)) )

data = ",".join(data)

_dataSegment.append("input_array dw %s" % data)
_dataSegment.append("input_array_len dw (input_array_len - input_array)/2")
_dataSegment.append("")

return ""         


