nonterminal: makeList
params: name, delimiter = "\n", scope = None
note:
Vrátí instanci seznamu v rámci scope (defautlně callerId), tzn při opakovaném volání se vrací stejná instance
Parametr nazev může být nonterminálnebo přímo zadaný text 
todo: potlačit při scope None 
code:
global _listCache
if scope == None: scope = callerId()

# vytvoření listu pokud neexistuje
try:
    _listCache
except NameError:
    _listCache = {}

hashableName = id(name) if callable(name) else name
   
if scope in _listCache:
    if hashableName in _listCache[scope]: return  _listCache[scope][hashableName]
else:
    _listCache[scope] = {}


data = None

# pokud predany nazev volatelny jako funkce tak ji zavolame
if callable(name):
    data = name()
else: # jinak ji povazujeme za nazev nonterminalu a zavolaáme ho
    data =  name


data = [x for x in filter(lambda x: len(x) > 0, map(lambda x: x.strip(), data.split(delimiter) ) ) ]

_listCache[scope][hashableName] = data

return _listCache[scope][hashableName]
 
nonterminal: loadFile
params: path
code:
import codecs
with codecs.open(MODULE_PATH+"/template_lib/%s" % path, 'r', 'utf-8') as f: 
  data = f.read()
return data
 
 
nonterminal: pop
params: fromList
note:
Vrátí a odstraní náhodný prvek ze seznamu
Pokud předaný parametr není list, zkusí ho z něj vytvořit pomocí pravidla List
code:
from random import random
from math import floor

# pokud není předaný parametr pouze text, tak z nšj zkusime udělat list  
if not (type(fromList) is list):
    fromList = makeList(fromList, scope = callerId() )


i = floor (len(fromList)*random() )

#todo: kontrola na nelist a na prázdnost

return fromList.pop(i)
